#!/bin/bash

# Functions

FLAG=$((0))

help_module () {
	# Help module

	echo " ____    _    ____ ___ ____   ____  _____ _   _ _____ _____ ____ _____"
	echo "| __ )  / \  / ___|_ _/ ___| |  _ \| ____| \ | |_   _| ____/ ___|_   _|"
	echo "|  _ \ / _ \ \___ \| | |     | |_) |  _| |  \| | | | |  _| \___ \ | |  "
	echo "| |_) / ___ \ ___) | | |___  |  __/| |___| |\  | | | | |___ ___) || |  "
	echo "|____/_/   \_\____/___\____| |_|   |_____|_| \_| |_| |_____|____/ |_|  "
    echo
 	echo " _____ ___   ___  _     ____  "
	echo "|_   _/ _ \ / _ \| |   / ___| "
	echo "  | || | | | | | | |   \___ \ "
  	echo "  | || |_| | |_| | |___ ___) |"
  	echo "  |_| \___/ \___/|_____|____/ "
  	echo "                            debian edition"
  	echo 
  	echo
  	echo "Usage:	sudo ./pentest_tools [ARGS]"
  	echo "		  invoking the command without [ARGS] installs the essentials."
  	echo "		  Will be prompted if want optional tools"
  	echo "[ARGS]"
  	echo "  --help	  Displays this help message"
  	echo "  --setoolkit 	  Installs setoolkit only"
  	echo "  --metasploit    Installs metasploit framework only"
  	echo "  --evillimiter   Installs evillimiter (https://github.com/bitbrute/evillimiter)"
  	echo "  --wifi   	  Installs the wireless tools"
  	echo
  	echo "For more information about the tools being installed, check out the github page:"
  	echo "		  https://github.com/0xcabrex/Pentest-tools "
  	echo 
}

install_msfconsole () {
	# Installing metasploit:

	if [ $(which msfconsole) == '/usr/bin/msfconsole' ]
	then
		echo
		echo
		echo -e "\e[1;33m-[WARNING]\e[0m Metasploit already present.. Skipping."
	else
		echo
		echo
		echo -e "\e[1;32+[OK]\e[0m Installing metasploit module.."
		mkdir -p /dev/shm/metasploit
		curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > /dev/shm/metasploit/msfinstall && \
		chmod 755 /dev/shm/metasploit/msfinstall && \
		/dev/shm/metasploit/msfinstall
		rm -r /dev/shm/metasploit
		echo -e "\e[1;32+[OK]\e[0m Installed metasploit"
		FLAG=$(($FLAG + 1))
	fi
}

install_setoolkit () {
	# Installing SEToolkit:

	if [ $(which setoolkit) == '/usr/local/bin/setoolkit' ]
	then
		echo
		echo
		echo -e "\e[1;33m-[WARNING]\e[0m SEToolkit already present.. Skipping."
	else
		clear
		echo -e "\e[1;32+[OK]\e[0m Installing setoolkit.."
		git clone https://github.com/trustedsec/social-engineer-toolkit.git /dev/shm/setoolkit
		if [ $(which python3) == 'usr/bin/python3' ]
		then 
			python3 -m pip install -r /dev/shm/setoolkit/requirements.txt
			python3 /dev/shm/setoolkit/setup.py
		else
			apt install python3 python3-pip -y 
			python3 -m pip install -r /dev/shm/setoolkit/requirements.txt
			python3 /dev/shm/setoolkit/setup.py
		fi
		rm -r /dev/shm/setoolkit
		echo -e "\e[1;32+[OK]\e[0m Installed setoolkit successfully"
		FLAG=$(($FLAG + 1))
	fi
}

install_evillimiter () {
	# Installing Evillimiter:

	if [ $(which evillimiter) == '/usr/local/bin/evillimiter' ]
	then
		echo
		echo
		echo -e "\e[1;33m-[WARNING]\e[0m Evillimiter already present.. Skipping."
	else
		echo
		echo
		echo -e "\e[1;32m+[OK]\e[0m Installing Evillimiter.."
		git clone https://github.com/bitbrute/evillimiter.git /dev/shm/evillimiter
		if [ $(which python3) == '/usr/bin/python3' ]
		then
			python3 /dev/shm/evillimiter/setup.py install
			rm -r /dev/shm/evillimiter
		else
			apt install python3 python3-pip -y
			python3 /dev/shm/evillimiter/setup.py install
			rm -r /dev/shm/evillimiter
		fi
		echo -r "\e[1;32+[OK]\e[0m Installed Evillimiter successfully"
		FLAG=$(($FLAG + 1))
	fi
}

install_wifi_tools () {
	# Installing the Wifi tools:

	if [ $(which wireshark) == '/usr/bin/wireshark' -a $(which arp-scan) == '/usr/sbin/arp-scan' -a $(which macchanger) == '/usr/bin/macchanger' -a $(which kismet) == '/usr/bin/kismet' -a $(which speedtest-cli) == '/usr/bin/speedtest-cli' -a $(which aircrack-ng) == '/usr/bin/aircrack-ng' ]
	then
		echo
		echo
		echo -e "\e[1;33m-[WARNING]\e[0m wireshark, arp-scan, macchanger, kismet, speedtest-cli, aircrack-ng are all installed, Skipping"
	else
		echo
		echo
		echo -e "\e[1;32m+[OK]\e[0m Installing wireless tools.."
		echo
		sudo apt install wireshark arp-scan macchanger kismet speedtest-cli aircrack-ng -y
		echo
		install_evillimiter
		FLAG=$(($FLAG + 1))
	fi
	
}

cleanup () {
	# Autoclean and autoremove

	echo
	echo
	echo -e "\e[1;32m+[OK]\e[0m Cleaning up.."
	sleep 1
	echo
	apt autoclean -y && apt autoremove -y 

}

install_wordlists () {
	# Making common wordlist for gobuster in /opt/wordlist:

	echo
	echo
	if [ -d '/opt' ]
	then
		echo -e "\e[1;32m+[OK]\e[0m Getting common wordlists for gobuster.. "
		echo
		echo
		mkdir -p /opt/wordlist
		mkdir -p /opt/wordlist/dirb
		if [ -f "/opt/wordlist/dirb/big.txt" -a -f "/opt/wordlist/dirb/common.txt" -a -f "/opt/wordlist/dirb/small.txt" ]
		then
			echo "The wordlists have already been installed in the /opt/wordlist/dirb/ directory"
		else
			wget https://raw.githubusercontent.com/v0re/dirb/master/wordlists/big.txt -O /opt/wordlist/dirb/big.txt
			wget https://raw.githubusercontent.com/v0re/dirb/master/wordlists/common.txt -O /opt/wordlist/dirb/common.txt
			wget https://raw.githubusercontent.com/v0re/dirb/master/wordlists/small.txt -O /opt/wordlist/dirb/small.txt
			FLAG=$(($FLAG + 1))
		fi

		# Downloading rockyou.txt.gz and extracting it:
		echo 
		echo
		echo -e "\e[1;32m+[OK]\e[0m Getting Rockyou.txt.."
		echo
		echo
		if [ -f "/opt/wordlist/rockyou.txt" ]
		then
			echo -e "Rockyou.txt already exists in /opt/wordlist/ directory"
		else
			if [ -f "/opt/wordlist/rockyou.txt.gz" ]
			then
				echo -e "Rockyou.txt.gz already exists in /opt/wordlist/ directory, not Downloading.."
			else
				sudo wget "https://github.com/praetorian-code/Hob0Rules/blob/master/wordlists/rockyou.txt.gz?raw=true" -O /opt/wordlist/rockyou.txt.gz
			fi
			zcat -c /opt/wordlist/rockyou.txt.gz > /opt/wordlist/rockyou.txt
			rm /opt/wordlist/rockyou.txt.gz
		fi
	else
		echo -e "\e[1;31m-[FATAL]\e[0m /opt directory does not exist, please create it manually to install wordlists"
	fi	

}

# Program


# Breakpoint for reference

if [ $(cat /etc/issue | grep -ic "ubuntu") -ge 1 -o $(cat /etc/issue | grep -ic "kali") -ge 1 ]
then
	if [ "$1" = '--help' ]
	then
		help_module
		exit

	elif [ "$1" = '--setoolkit' ]
	then
		if [ "$EUID" -ne 0 ]
		then
			help_module
			echo -e "\e[1;31m-[ERROR]\e[0m Please run as root"
	  		exit
		fi
		install_setoolkit

	elif [ "$1" = '--metasploit' ]
	then
		if [ "$EUID" -ne 0 ]
		then
			help_module
	  		echo -e "\e[1;31m-[ERROR]\e[0m Please run as root"
	  		exit
		fi
		install_msfconsole

	elif [ "$1" = '--evillimiter' ]
	then
		if [ "$EUID" -ne 0 ]
		then
			help_module
	  		echo -e "\e[1;31m-[ERROR]\e[0m Please run as root"
	  		exit
		fi
		install_evillimiter

	elif [ "$1" = '--wifi' ]
	then
		if [ "$EUID" -ne 0 ]
		then
			help_module
	  		echo -e "\e[1;31m-[ERROR]\e[0m Please run as root"
	  		exit
		fi
		install_wifi_tools

	elif [ "$1" = '' ]
	then
		if [ "$EUID" -ne 0 ]
		then 
			help_module
			echo -e "\e[1;31m-[ERROR]\e[0m Please run as root"
	  		exit
		fi

		read -p "Do you want to install all tools?(y/n): " ANSWER
		if [ $ANSWER == 'y' ]
		then
			echo
			echo
			echo -e "\e[1;32m+[OK]\e[0m Optional tools will be installed "
			echo -e "\e[1;32m+[OK]\e[0m commencing upgrade.."
			echo 
			echo
			sleep 1
			apt update && apt upgrade -y
			if [ $(which terminator) == "/usr/bin/terminator" -a $(which arp-scan) == "/usr/bin/arp-scan" -a $(which wireshark) == "/usr/bin/wireshark" -a $(which macchanger) == "/usr/bin/macchanger" -a $(which speedtest-cli) == "/usr/bin/speedtest-cli" -a $(which hexedit) == "/usr/bin/hexedit" -a $(which objdump) == "/usr/bin/objdump" -a $(which java) == '/usr/bin/java' -a $(which proxychains) == '/usr/bin/proxychains' -a $(which aircrack-ng) == '/usr/bin/aircrack-ng' -a $(which kismet) == '/usr/bin/kismet' ]
			then
				echo -e "\e[1;33m+[WARNING]\e[0m terminator, arp-scan, wireshark, macchanger, speedtest-cli, hexedit, binutils-i586-linux-gnu, default-jdk, proxychains, aircrack-ng, kismet, are already installed"
			else
				echo -e "\e[1;32m+[OK]\e[0m Installing all tools.."
				sleep 1
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing terminator..."
				apt install terminator -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing tor..."
				apt install tor -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing arp-scan..."
				apt install arp-scan -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing wireshark..."
				apt install wireshark -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing macchanger..."
				apt install macchanger -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing speedtest-cli..."
				apt install speedtest-cli -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing hexedit..."
				apt install hexedit -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing binutils-i586-linux-gnu..."
				apt install binutils-i586-linux-gnu -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing default-jdk..."
				apt install default-jdk -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing proxychains..."
				apt install proxychains -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing aircrack-ng..."
				apt install aircrack-ng -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing kismet..."
				apt install kismet -y
				
				install_msfconsole
				install_setoolkit
				install_evillimiter
				install_wordlists
				
				FLAG=$(($FLAG + 1))
			fi

		elif [ $ANSWER == 'n' ]
		then
			echo
			echo -e "\e[1;32m+[OK]\e[0m Optional tools will NOT be installed "
			echo -e "\e[1;32m+[OK]\e[0m commencing upgrade.."
			sleep 1
			echo
			echo
			apt update && apt upgrade -y 
			echo
			if [ $(which wget) == '/usr/bin/wget' -a $(which curl) == '/usr/bin/curl' -a $(which nmap) == '/usr/bin/nmap' -a $(which sqlmap) == '/usr/bin/sqlmap' -a $(which git) == '/usr/bin/git' -a $(which nikto) == '/usr/bin/nikto' -a $(which gobuster) == '/usr/bin/gobuster' -a $(which hydra) == '/usr/bin/hydra' ]
			then
				echo -e "\e[1;33m+[WARNING]\e[0m wget, curl, nmap, sqlmap, git, python3-pip, nikto, gobuster, hydra, have been already instaled"
			else
				echo -e "\e[1;32m+[OK]\e[0m Installing basic tools.."
				sleep 1
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing wget...."
				apt install wget -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing curl...."
				apt install curl -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing nmap...."
				apt install nmap -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing sqlmap...."
				apt install sqlmap -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing git...."
				apt install git -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing python3-pip...."
				apt install python3-pip -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing nikto...."
				apt install nikto -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing gobuster...."
				apt install gobuster -y
				clear
				echo -e "\e[1;32m+[OK]\e[0m Installing hydra...."
				apt install hydra -y
				FLAG=$(($FLAG + 1))

				clear
				install_wordlists
			fi

		else
			echo -e "\e[1;31m-[ERROR]\e[0m Please enter y or n"
			exit
		fi
	else
		help_module
		echo -e "\e[1;31m-[ERROR]\e[0m Invalid argument $1"
		exit
	fi

else
	echo
	echo -e "\e[1;31m-[ERROR]\e[0m This script can only run on debian systems. Aborting"
fi
# Breakpoint for reference

if [ $FLAG == 0 ]
then
	echo
	echo
	echo -e "\e[1;33mNo changes were done to your system.\e[0m"
	echo
	exit
else
	cleanup	
	echo
	echo
	echo -e "\e[1;32mAll tools have been installed successfully!\e[0m"
	echo
	exit
fi
