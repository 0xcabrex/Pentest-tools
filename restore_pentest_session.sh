#!/bin/bash

# Functions

FLAG=0

help_module () {
	# Help module

	echo " ____    _    ____ ___ ____   ____  _____ _   _ _____ _____ ____ _____"
	echo "| __ )  / \  / ___|_ _/ ___| |  _ \| ____| \ | |_   _| ____/ ___|_   _|"
	echo "|  _ \ / _ \ \___ \| | |     | |_) |  _| |  \| | | | |  _| \___ \ | |  "
	echo "| |_) / ___ \ ___) | | |___  |  __/| |___| |\  | | | | |___ ___) || |  "
	echo "|____/_/   \_\____/___\____| |_|   |_____|_| \_| |_| |_____|____/ |_|  "
    echo
 	echo " _____ ___   ___  _     ____  "
	echo "|_   _/ _ \ / _ \| |   / ___| "
	echo "  | || | | | | | | |   \___ \ "
  	echo "  | || |_| | |_| | |___ ___) |"
  	echo "  |_| \___/ \___/|_____|____/ "
  	echo 
  	echo
  	echo "Usage:	sudo ./restore_pentest_tools.sh [ARGS]"
  	echo "		  invoking the command without [ARGS] installs the essentials."
  	echo "		  Will be prompted if want optional tools"
  	echo "[ARGS]"
  	echo "  --help	  Displays this help message"
  	echo "  --setoolkit 	  Installs setoolkit only"
  	echo "  --metasploit    Installs metasploit framework only"
  	echo "  --evillimiter   Installs evillimiter (https://github.com/bitbrute/evillimiter)"
  	echo "  --wifi   Installs the wireless tools"
  	echo
  	echo "For more information about the tools being installed, check out the github page:"
  	echo "		  https://github.com/0xcabrex/Pentest-tools "
  	echo
  	exit 
}

install_msfconsole () {
	# Installing metasploit:

	if [ $(which msfconsole) == '/usr/bin/msfconsole' ]
	then
		echo -e "\e[1;33m-[WARNING]\e[0m Metasploit already present.. Skipping."
		echo
	else
		echo
		echo
		echo -e "\e[1;32+[OK]\e[0m Installing metasploit module.."
		mkdir -p /dev/shm/metasploit
		curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > /dev/shm/metasploit/msfinstall && \
		chmod 755 /dev/shm/metasploit/msfinstall && \
		/dev/shm/metasploit/msfinstall
		rm -r /dev/shm/metasploit
		FLAG=1
	fi
}

install_setoolkit () {
	# Installing SEToolkit:

	if [ $(which setoolkit) == '/usr/local/bin/setoolkit' ]
	then
		echo -e "\e[1;33m-[WARNING]\e[0m SEToolkit already present.. Skipping."
		echo
	else
		echo
		echo
		echo -e "\e[1;32+[OK]\e[0m Installing setoolkit.."
		git clone https://github.com/trustedsec/social-engineer-toolkit.git /dev/shm/setoolkit
		python3 -m pip install -r /dev/shm/setoolkit/requirements.txt
		python3 /dev/shm/setoolkit/setup.py
		rm -r /dev/shm/setoolkit
		FLAG=1
	fi
}

install_evillimiter () {
	# Installing Evillimiter:

	if [ $(which evillimiter) == '/usr/local/bin/evillimiter' ]
	then
		echo
		echo -e "\e[1;33m-[WARNING]\e[0m Evillimiter already present.. Skipping."
		echo
	else
		echo
		echo
		echo -e "\e[1;32+[OK]\e[0m Installing Evillimiter.."
		git clone https://github.com/bitbrute/evillimiter.git /dev/shm/evillimiter
		python3 /dev/shm/evillimiter/setup.py install
		rm -r /dev/shm/evillimiter
		FLAG=1
	fi
}

install_wifi_tools () {
	# Installing the Wifi tools:

	echo
	echo
	echo -e "\e[1;32m+[OK]\e[0m Installing wireless tools.."
	echo
	sudo apt install wireshark arp-scan macchanger speedtest-cli -y
	echo
	install_evillimiter
}

cleanup () {
	# # Autoclean and autoremove

	echo
	echo
	echo "\e[1;32m+[OK]\e[0m Cleaning up.."
	echo
	apt autoclean && apt autoremove

}

install_wordlists () {
	# Making common wordlist for gobuster in /opt/wordlist:

	echo
	echo
	echo -e "\e[1;32m +[OK]\e[0m Getting common wordlists for gobuster.. "
	echo
	echo
	mkdir -p /opt/wordlist
	mkdir -p /opt/wordlist/dirb
	wget https://raw.githubusercontent.com/v0re/dirb/master/wordlists/big.txt -O /opt/wordlist/dirb/big.txt
	wget https://raw.githubusercontent.com/v0re/dirb/master/wordlists/common.txt -O /opt/wordlist/dirb/common.txt
	wget https://raw.githubusercontent.com/v0re/dirb/master/wordlists/small.txt -O /opt/wordlist/dirb/small.txt

	# Downloading rockyou.txt.gz and extracting it:
	echo 
	echo
	echo -e "\e[1;32m +[OK]\e[0m Getting Rockyou.txt.."
	echo
	echo
	wget "https://github.com/praetorian-code/Hob0Rules/blob/master/wordlists/rockyou.txt.gz?raw=true" -O /opt/wordlist/rockyou.txt.gz
	zcat -c /opt/wordlist/rockyou.txt.gz > /opt/wordlist/rockyou.txt
	rm /opt/wordlist/rockyou.txt.gz

}

# Program


# Breakpoint for reference

if [ "$1" = '--help' ]
then
	help_module

elif [ "$1" = '--setoolkit' ]
then
	install_setoolkit

elif [ "$1" = '--metasploit' ]
then
	install_msfconsole

elif [ "$1" = '--evillimiter' ]
then
	install_evillimiter

elif [ "$1" = '--wifi' ]
then
	install_wifi_tools

elif [ "$1" = '' ]
then
	if [ "$EUID" -ne 0 ]
	then echo -e "\e[1;31m-[ERROR]\e[0m Please run as root"
		echo
		help_module
  		exit
	fi

	read -p "Do you want to install all tools?(y/n): " ANSWER
	if [ $ANSWER == 'y' ]
	then
		echo -e "\e[1;32m+[OK]\e[0m Optional tools will be installed "
		echo -e "\e[1;32m+[OK]\e[0m commencing upgrade.."
		echo 
		echo
		apt update && apt upgrade -y
		echo -e "\e[1;32+[OK]\e[0m Installing all tools.."
		apt install terminator arp-scan wireshark macchanger speedtest-cli hexedit binutils-i586-linux-gnu default-jdk proxychains -y
		
		install_msfconsole
		install_setoolkit
		install_evillimiter
		install_wordlists
		
		cleanup

	elif [ $ANSWER == 'n' ]
	then
		echo
		echo -e "\e[1;32m+[OK]\e[0m Optional tools will NOT be installed "
		echo -e "\e[1;32m+[OK]\e[0m commencing upgrade.."
		echo
		echo
		apt update && apt upgrade -y 
		echo
		echo -e "\e[1;32m+[OK]\e[0m Installing basic tools.."
		echo 
		apt install wget curl nmap sqlmap git python3-pip nikto gobuster hydra -y

		install_wordlists
		cleanup

	else
		echo -e "\e[1;31m-[ERROR]\e[0m Please enter y or n"
		exit
	fi
else
	echo -e "\e[1;31m-[ERROR]\e[0m Invalid argument $1"
	help_module
	exit
fi

# Breakpoint for reference

if [ $FLAG == 0 ]
then
	echo -e "\e[1;33mNo changes were done to your system.\e[0m"
	echo
	exit
elif [ $FLAG == 1 ]
then
	echo -e "\e[1;32mAll tools have been installed successfully!\e[0m"
	echo
	exit
else
	echo -e "\e[1;31mbruh error\e[0m"
	exit
fi
